# -*- coding: utf-8 -*-
"""Teste dos Dados de Demanda (análise e projeção).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17YVZjWc0uudnmENcxYgvt-7EsNgUCRgp

*   Análise dos dados de venda de tomadas/interruptores/pulsadores
*   Previsão de demanda utilizando ARIMA (Autoregressive Integrated Moving Average).
"""

import warnings
import itertools
import numpy as np
import matplotlib.pyplot as plt
warnings.filterwarnings("ignore")
plt.style.use('fivethirtyeight')
import pandas as pd
import statsmodels.api as sm
import matplotlib
matplotlib.rcParams['axes.labelsize'] = 14
matplotlib.rcParams['xtick.labelsize'] = 12
matplotlib.rcParams['ytick.labelsize'] = 12
matplotlib.rcParams['text.color'] = 'k'
import seaborn as sns

vendas = pd.read_csv('/content/dados_vendas.csv')

# cria a coluna de data no formato Datetime
vendas = vendas.rename(columns={'ano':'year','mes':'month'})
vendas['day'] = 1
vendas['date'] = pd.to_datetime(vendas[['year','month','day']])

# seta a coluna de data como index
vendas = vendas.set_index('date')

# plota o total de vendas e por tipo de produto
cols_plot = ['total', 'interruptores', 'tomadas', 'pulsadores']
axes = vendas[cols_plot].plot( figsize=(11, 9), subplots=True)
for ax in axes:
    ax.set_ylabel('quantidade')

"""É possível observar que os três produtos possuem um padrão de venda semelhante.
Também observa-se uma sazonalidade nas vendas, onde após o início do ano há uma declínio seguido de um significante aumento nas vendas.

"""

# venda total (média anual)
data_columns = ['total']
vendas_media_anual = vendas[data_columns].resample('A').mean()
vendas_media_anual.plot()

"""Considernado apenas a média anual das vendas totais, percebe-se apenas no ano de 2015 um declínio na quantidade. Após 2016, a quantidade média do total de produtos apresenta crescimento constante."""

# sazonalidade (agrupa por meses)
sns.boxplot(data=vendas, x='month', y='total')

"""Aqui é possível verificar a sazonalidade na quantidade total, com declínio nas vendas no mês de março, seguido de aumento até o final do ano."""



# apenas para marcar a FREQ=MS, "calcula" a média mas não altera os valores
# pois continua sendo frequencia mensal
y = vendas['total'].resample('MS').mean()

from pylab import rcParams
rcParams['figure.figsize'] = 18, 8
decomposition = sm.tsa.seasonal_decompose(y, model='additive')
fig = decomposition.plot()
plt.show()

"""time-series decomposition: that allows us to decompose our time series into three distinct components: trend, seasonality, and noise."""

# Grid-Search para achar os parâmetros ótimos para o modelo ARIMA

p = d = q = range(0, 2)
pdq = list(itertools.product(p, d, q))
seasonal_pdq = [(x[0], x[1], x[2], 12) for x in list(itertools.product(p, d, q))]

for param in pdq:
    for param_seasonal in seasonal_pdq:
        try:
            mod = sm.tsa.statespace.SARIMAX(y,order=param,seasonal_order=param_seasonal,enforce_stationarity=False,enforce_invertibility=False)
        except:
            continue
results = mod.fit()
print('ARIMA{}x{}12 - AIC:{}'.format(param, param_seasonal, results.aic))

mod = sm.tsa.statespace.SARIMAX(y,
                                order=(1, 1, 1),
                                seasonal_order=(1, 1, 1, 12),
                                enforce_stationarity=False,
                                enforce_invertibility=False)
results = mod.fit()
print(results.summary().tables[1])

# verifica se alguma anomalia nos dados
results.plot_diagnostics(figsize=(16, 8))
plt.show()

# Cereja do Bolo: aqui podemos comparar a previsão da demanda para o ano de 2020.
# em AZUL são os dados reais da demanda
# em LARANJA sao os dados projetados pelo modelo
pred = results.get_prediction(start=pd.to_datetime('2020-01-01'), dynamic=False)
pred_ci = pred.conf_int()
ax = y.plot(label='Observado')
pred.predicted_mean.plot(ax=ax, label='Projetado', alpha=.7, figsize=(14, 7))
ax.fill_between(pred_ci.index,
                pred_ci.iloc[:, 0],
                pred_ci.iloc[:, 1], color='k', alpha=.2)
ax.set_xlabel('Data')
ax.set_ylabel('Quantidade')
plt.legend()
plt.show()

y_forecasted = pred.predicted_mean
y_truth = y['2020-01-01':]
mse = ((y_forecasted - y_truth) ** 2).mean()
print('Erro Quadrático Médio da projeção {}'.format(round(mse, 2)))
print('Raiz do Erro Quadrático Médio da projeção {}'.format(round(np.sqrt(mse), 2)))

"""Raiz do MSE = 5.269.293
Sendo que os totais de venda variam de
41.851.313 a 11.024.039
"""

# Projetando a demanda para 2021 e 2022. Será?! kkk

pred_uc = results.get_forecast(steps=24)
pred_ci = pred_uc.conf_int()
ax = y.plot(label='observado', figsize=(14, 7))
pred_uc.predicted_mean.plot(ax=ax, label='Projetado')
ax.fill_between(pred_ci.index,
                pred_ci.iloc[:, 0],
                pred_ci.iloc[:, 1], color='k', alpha=.25)
ax.set_xlabel('Data')
ax.set_ylabel('Quantidade')
plt.legend()
plt.show()